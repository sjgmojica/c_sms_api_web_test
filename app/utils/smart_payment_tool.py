
'''
this tool is used to send payment via smart payment gateway
@author: vincent agudelo (with ejrobles)
'''
import gredis.client
import ujson as json
import urllib
import ujson as json 

# use this import to 
from . import smart_payment_config

redisconn = gredis.client.Connection(  address=smart_payment_config['redis_host'], 
                                       port=smart_payment_config['redis_port']
                                       )

redisconn.connect()

trasaction_queue_key = smart_payment_config['transaction_queue_key']

def execute_payment( min, amount, trans_id, callback_params=None ):
    '''
    @param min: STRING. the mobile number to get the payment from
    @param amount: FLOAT . the amount to debit
    @param trans_id: STRING . super uniuqe string that will represent as transactionid (redis key compatible)
    @param callback_params: mapping of params to append in callback
    
'''    
    

    
    #------------------------------------------------------------------------
    #--- from configs
    
    #--- service id (get from jefte)
    serviceid = smart_payment_config['serviceid']
    
    # merchant id of chikka
    merchant_id = smart_payment_config['merchant_id']
    
    #----------------------------------------------------------------------------
    # this is the request body that is required by payment gateway
    request_body = {
        "request": {
            "transactionId": trans_id,
            "merchantId": merchant_id,
            "accountDetails": {
                "accountId": min,
                "accountType": "MSISDN",
                "fundSource": "Mob"
            },
            "amountDetails": {
                "amount":  "%.2f" % float(amount),
                "currency": "PHP"
            },
            "serviceDetails": {
                "serviceId": serviceid 
            }
        }
    }

    
    #--- redis configs that will unlikely change 
    # just needs to be noted here
    request_body_key = 'request_body'
    callback_params_key = 'extra'
    
    #--- put request body in hash
    try:
        response_1 = redisconn.hset( trans_id , request_body_key, json.dumps(request_body) )
    except Exception, e :
        raise PaymentError( 'could not execute HSET %s %s [%s]  to host %s: port %s;  %s' % (   trans_id, request_body_key, json.dumps(request_body),smart_payment_config['redis_host'], smart_payment_config['redis_port'], e ) )
    
    #--- extra params can be passed for callback arguments
    if callback_params :
        extra_params =  urllib.urlencode( callback_params ) #  'account_id=123&checkout_id=456'
        #--- put extra params in the hash
        try :
            result_2 = redisconn.hset( trans_id , callback_params_key, extra_params )
        except Exception, e:
            raise  PaymentError( 'could not attach params to payment: %s %s %s . %s '% ( trans_id , callback_params_key, extra_params, e )  )

    #--- push the request to queue
    response = redisconn.lpush(trasaction_queue_key, trans_id )
    
    if not response:
        return False
    else:
        return True



def is_successful( json_response ):
    '''
    @param json_response: STRING . JSON-formatted string generated by smart payment gateway
    it is sent via callback URL
    
    
    reponse should look like this
    
    {
        "response": {
            "responseDesc": "Success",
            "responseCode": "0000",
            "serverReferenceId": "2110031077807",
            "amountDetails": {
                "currency": "PHP",
                "amount": "123.45"
            },
            "fundSourceResponseDetails": {
                "fundSourceResponseCode": "ED00",
                "fundSource": "Mob",
                "fundSourceResponseDesc": "Successful deduct, Full deduct"
            },
            "transactionId": "hellokirby"
        }
    }    
    
    
    '''    
    try :
        response = json.loads( json_response )
    except Exception, e :
        raise InvalidJSONResponse( 'invalid json format: %s %s' % (e, json_response) ) 
         

    # get the value of responseCode
    try:
        if response['response']['responseCode'] == '0000' and response['response']['responseDesc'] == 'Success' :
            return True 
    
        else :
            return False

    except Exception, e :
        raise InvalidResponseData( 'invalid response contents: %s %s' % (e, json_response) )
        
        
class PaymentError( Exception ):
    pass

class InvalidResponseData( Exception ):
    pass
    
class InvalidJSONResponse( Exception ):
    pass

#--- script ends here
    
'''
example from EJ ROBLES
request = {
    "request": {
        "transactionId": transid,
        "merchantId": "00011", (standard chikka id)
        "accountDetails": {
            "accountId": min,
            "accountType": "MSISDN",
            "fundSource": "Mob"
        },
        "amountDetails": {
            "amount": str(amt), i.e.  "1234.56"
            "currency": "PHP"
        },
        "serviceDetails": {
            "serviceId": serviceid - get from jefte
        }
    }
}



extra = "msisdn=%s&service=%s" % (min, service.upper())

 



execute to hset the params 

hset TEST "request_body" json.dumps(request)
hset TEST "extra" "asdfas=asdfsdf"



p
lpush to this redis key
redis key = pgw_smsapi_staging

prod server
technetium.internal.chikka.com 6388


test server
112.199.82.67

redis
technetium:6388





sample callbak

{"response": {"responseDesc": "Success", "responseCode": "0000", "serverReferenceId": "2110031077807", "amountDetails": {"currency": "PHP", "amount": "1.00"}, "fundSourceResponseDetails": {"fundSourceResponseCode": "ED00", "fundSource": "Mob", "fundSourceResponseDesc": "Successful deduct, Full deduct"}, "transactionId": "test10024"}}
10.11.2.189 - - [2013-10-22 18:47:21] "POST /callback?msisdn=639984690224&service=EPINS HTTP/1.1" 200 135 0.000349

10.11.2.189 - - [2013-10-22 18:47:21] "POST /callback?msisdn=639984690224&service=EPINS HTTP/1.1" 200 135 0.000349




    
    
    request = {
    "request": {
        "transactionId": transid,
        "merchantId": "00011"
        "accountDetails": {
            "accountId": min,
            "accountType": "MSISDN",
            "fundSource": "Mob"
        },
        "amountDetails": {
            "amount": str(amt),
            "currency": "PHP"
        },
        "serviceDetails": {
            "serviceId": serviceid 
        }
    }
}
'''